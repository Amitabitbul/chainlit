name: Publish

on:
  workflow_dispatch:
  push:
    branches: [שצןא]
  release:
    types: [published]

jobs:
  # tests:
  #   uses: ./.github/workflows/tests.yaml
  #   secrets: inherit

  build-n-publish:
    name: Upload release to GitHub
    runs-on: ubuntu-latest
    # needs: [tests]
    env:
      name: pypi
      url: https://pypi.org/p/chainlit
    permissions:
      contents: read
      id-token: write # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
      - uses: actions/checkout@v3
        with:
          ref: amit

      - uses: pnpm/action-setup@v2
        with:
          version: 8.6.9

      - name: Use Node.js 16.15.0
        uses: actions/setup-node@v3
        with:
          node-version: '16.15.0'
          cache: 'pnpm'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Copy readme to backend
        run: cp README.md backend/

      - name: Install JS dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build chainlit
        run: pnpm run build

      - name: Get version from setup.py
        id: get_version
        run: |
          echo "::set-output name=version::$(python backend/setup.py --version)"

      - name: Create Git tag
        id: tag
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = '${{ steps.get_version.outputs.version }}';
            const tagName = `v${version}`;
            const { data: ref } = await github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${tagName}`,
              sha: context.sha,
            });
            return { tagName };

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tagName }}
          release_name: Release ${{ steps.tag.outputs.tagName }}
          draft: false
          prerelease: false

      - name: Build Python distributions
        run: |
          cd backend
          poetry build

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: backend/dist/*.whl
          asset_name: my_package-${{ steps.tag.outputs.tagName }}.whl
          asset_content_type: application/zip
